<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

    <!-- 把标记了@Controller注解的类转换为bean -->
    <context:component-scan base-package="com.wozai"/>

    <tx:jta-transaction-manager />
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="sampleDataSource" />
    </bean>
    <!--事务的简洁配置-->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="find*" propagation="REQUIRED"/>
            <tx:method name="get*" propagation="REQUIRED"/>
            <tx:method name="apply*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
        </tx:attributes>

    </tx:advice>
    <aop:config>
        <aop:pointcut id="allTestServiceMethod" expression="execution(* com.wozai.service.*.*(..))"/>
        <aop:advisor pointcut-ref="allTestServiceMethod" advice-ref="transactionAdvice" />
    </aop:config>



    <!--  读取属性文件
     <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
         <property name="locations">
             <list>
                 <value>classpath:runtimecfg/dubbo.properties</value>
                 <value>classpath:runtimecfg/important.properties</value>
             </list>
         </property>
         <property name="ignoreUnresolvablePlaceholders" value="true" />
     </bean>-->

    <!--
        使用注解的简单配置，相当于定义了 AnnotationMethodHandlerAdapter和 DefaultAnnotationHandlerMapping，
        以及一些消息转换，如：@RequestBody 、@ResponseBody
    -->
    <mvc:annotation-driven />
    <mvc:resources location="/WEB-INF/pages/" mapping="/css/**"/>
    <mvc:resources location="/WEB-INF/images/" mapping="/images/**"/>
    <!-- Request Mapping Adapter -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>

    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/pages/" p:suffix=".jsp"/>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <!--?前面的是包名，messages是配置文件的前缀?-->
        <property name="basename" value="i18n.message"/>
    </bean>

    <!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
    <!--
    <mvc:default-servlet-handler/>

    <mvc:resources mapping="/static/**" location="/static/" />
             -->
    <!-- 定义无需Controller的url<->view直接映射
    <mvc:view-controller path="/" view-name="index"/>
                                          -->

<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        &lt;!&ndash; 定义默认的异常处理页面，当该异常类型的注册时使用 &ndash;&gt;
        <property name="defaultErrorView" value="error/error"></property>
        &lt;!&ndash; 定义异常处理页面用来获取异常信息的变量名，默认名为exception &ndash;&gt;
        <property name="exceptionAttribute" value="ex"></property>
        &lt;!&ndash; 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 &ndash;&gt;
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.RuntimeException">error/error</prop>
                <prop key="java.sql.SQLException">error/error</prop>
            </props>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        &lt;!&ndash; set the max upload size100MB &ndash;&gt;
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="defaultEncoding">
            <value>utf-8</value>
        </property>
    </bean>-->


    <bean id="sampleSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="sampleDataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sampleSqlSessionFactory"/>
    </bean>


    <!--<bean id="simpleThreadPoolTaskExecutor"-->
          <!--class="org.springframework.scheduling.quartz.SimpleThreadPoolTaskExecutor">-->
        <!--<property name="makeThreadsDaemons" value="true"/>-->
        <!--<property name="threadCount" value="1" />-->
        <!--<property name="threadNamePrefix" value="loginCheck"/>-->
        <!--<property name="waitForJobsToCompleteOnShutdown" value="false" />-->
    <!--</bean>-->


    <bean id="loginAuthTaskJob" class="com.wozai.cache.LoginAuthTaskJob">
        <constructor-arg name="loginCheckFailList" ref="loginCheckFailList"/>
        <constructor-arg name="loginSuccessMap" ref="loginSuccessMap"/>
    </bean>
    <bean id="loginAuthTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="loginAuthTaskJob"/>
        <property name="targetMethod" value="authCheck"/>
    </bean>
    <bean id="loginAuthTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="loginAuthTask"/>
        <property name="cronExpression" value="0 0/5 * * * ?"/>
        <property name="startDelay" value="10000"/>
    </bean>

    <bean id="searchResultTaskJob" class="com.wozai.cache.SearchResultTaskJob">
        <constructor-arg name="map" ref="searchResultMap"/>
        <constructor-arg name="service" ref="loctionManagerService"/>
    </bean>
    <bean id="searchResultTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="searchResultTaskJob"/>
        <property name="targetMethod" value="resultCheck"/>
    </bean>
    <bean id="searchResultTaskTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="searchResultTask"/>
        <property name="cronExpression" value="0 0/4 * * * ?"/>
        <property name="startDelay" value="10000"/>
    </bean>

    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
        <property name="triggers">
            <list>
                <ref bean="loginAuthTaskTrigger"/>
                <ref bean="searchResultTaskTrigger"/>
            </list>
        </property>
    </bean>

</beans>